"""Initial migration

Revision ID: f8fd11a1b7dd
Revises: 
Create Date: 2025-10-11 10:11:03.582152

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f8fd11a1b7dd'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.CheckConstraint("name IN ('RRHH', 'EMPLOYEE')", name='check_role_name'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('users',
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('leave_balances',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('leave_type', sa.Enum('VACATION', 'SICK', 'PERSONAL', 'OTHER', name='leave_balance_type_enum'), nullable=False),
    sa.Column('remaining_days', sa.Numeric(precision=7, scale=2), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_leave_balances_id'), 'leave_balances', ['id'], unique=False)
    op.create_index('uq_leave_user__year', 'leave_balances', ['user_id', 'leave_type', 'year'], unique=True)
    op.create_table('time_off_requests',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('leave_type', sa.Enum('VACATION', 'SICK', 'PERSONAL', 'OTHER', name='leave_type_enum'), nullable=False),
    sa.Column('days_requested', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='leave_status_enum'), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('review_comment', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_time_off_requests_id'), 'time_off_requests', ['id'], unique=False)
    op.create_table('time_tracking',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('record_type', sa.Enum('CHECK_IN', 'CHECK_OUT', name='record_type_enum'), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_time_tracking_id'), 'time_tracking', ['id'], unique=False)
    op.create_table('tokens',
    sa.Column('access_token', sa.String(length=512), nullable=False),
    sa.Column('token_type', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('access_token')
    )
    op.create_index(op.f('ix_tokens_id'), 'tokens', ['id'], unique=False)
    op.create_table('time_adjustments',
    sa.Column('time_record_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('adjusted_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('adjusted_type', sa.Enum('CHECK_IN', 'CHECK_OUT', name='adjusted_type_enum'), nullable=True),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='adjustment_status_enum'), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('review_comment', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('create_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('update_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('is_disabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['time_record_id'], ['time_tracking.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_time_adjustments_id'), 'time_adjustments', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_time_adjustments_id'), table_name='time_adjustments')
    op.drop_table('time_adjustments')
    op.drop_index(op.f('ix_tokens_id'), table_name='tokens')
    op.drop_table('tokens')
    op.drop_index(op.f('ix_time_tracking_id'), table_name='time_tracking')
    op.drop_table('time_tracking')
    op.drop_index(op.f('ix_time_off_requests_id'), table_name='time_off_requests')
    op.drop_table('time_off_requests')
    op.drop_index('uq_leave_user__year', table_name='leave_balances')
    op.drop_index(op.f('ix_leave_balances_id'), table_name='leave_balances')
    op.drop_table('leave_balances')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    # ### end Alembic commands ###
